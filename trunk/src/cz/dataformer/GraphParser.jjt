/**
 * JavaCC file
 */
 
options {
  JDK_VERSION = "1.5";
  STATIC = false;
  MULTI=true;
  VISITOR=true;
  VISITOR_EXCEPTION = "VisitorException";
  DEBUG_PARSER=true;
}
PARSER_BEGIN(GraphParser)
package cz.dataformer;

import cz.dataformer.body.*;
import cz.dataformer.type.*;
import cz.dataformer.expr.*;
import cz.dataformer.statement.*;
import java.util.List;
import java.util.LinkedList;

public class GraphParser {
	private String debugField;
	
	/* 
	 * Utility method to add items into list
	 * Also features lazy allocation
	 */
	private List add(List list, Object obj) {
		if (list == null) {
			list = new LinkedList();
    	}
    	list.add(obj);
    	return list;
    }
	
}
PARSER_END(GraphParser)

SKIP : { " "|"\r"|"\t"|"\n"|"\f" }

TOKEN: { < #LETTER_OR_UNDERSCORE: (["a"-"z", "A"-"Z", "_"])+ > }
TOKEN: { < #LETTERS_OR_DIGITS_OR_UNDERSCORES: (["a"-"z", "A"-"Z", "0"-"9", "_"])+ > }

TOKEN :
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL> (["l","L"])?
      | <HEX_LITERAL> (["l","L"])?
      | <OCTAL_LITERAL> (["l","L"])?
  >
|
  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
|
  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|
  < #OCTAL_LITERAL: "0" (["0"-"7"])* >
}

TOKEN :
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < SEMICOLON: ";" >
| < COMMA: "," >
| < DOT: "." >
| < AT: "@" >
}

TOKEN :
{
  < ASSIGN: "=" >
| < LT: "<" >
| < BANG: "!" >
| < TILDE: "~" >
| < HOOK: "?" >
| < COLON: ":" >
| < EQ: "==" >
| < LE: "<=" >
| < GE: ">=" >
| < NE: "!=" >
| < SC_OR: "||" >
| < SC_AND: "&&" >
| < INCR: "++" >
| < DECR: "--" >
| < PLUS: "+" >
| < MINUS: "-" >
| < STAR: "*" >
| < SLASH: "/" >
| < BIT_AND: "&" >
| < BIT_OR: "|" >
| < XOR: "^" >
| < REM: "%" >
| < LSHIFT: "<<" >
| < PLUSASSIGN: "+=" >
| < MINUSASSIGN: "-=" >
| < STARASSIGN: "*=" >
| < SLASHASSIGN: "/=" >
| < ANDASSIGN: "&=" >
| < ORASSIGN: "|=" >
| < XORASSIGN: "^=" >
| < REMASSIGN: "%=" >
| < LSHIFTASSIGN: "<<=" >
| < RSIGNEDSHIFTASSIGN: ">>=" >
| < RUNSIGNEDSHIFTASSIGN: ">>>=" >
| < ELLIPSIS: "..." >
| < PORT_CONNECTION: "->" >
}


/* >'s need special attention due to generics syntax. */
TOKEN :
{
 < RSIGNEDSHIFT: ">>" >
  {
     matchedToken.kind = GT;
     ((GTToken)matchedToken).realKind = RSIGNEDSHIFT;
     input_stream.backup(1);
     matchedToken.image = ">";
  }
| < GT: ">" >
}



TOKEN: { < STRING :
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
  	>
  }

TOKEN :
{
  < ABSTRACT: "abstract" >
| < ASSERT: "assert" >
| < BOOLEAN: "boolean" >
| < BREAK: "break" >
| < BYTE: "byte" >
| < CASE: "case" >
| < CATCH: "catch" >
| < CHAR: "char" >
| < CLASS: "class" >
| < COMPONENT : "component" >
| < CONNECT : "connect" >
| < CONST: "const" >
| < CONTINUE: "continue" >
| < _DEFAULT: "default" >
| < DO: "do" >
| < DOUBLE: "double" >
| < ELSE: "else" >
| < ENUM: "enum" >
| < EXTENDS: "extends" >
| < FALSE: "false" >
| < FINAL: "final" >
| < FINALLY: "finally" >
| < FLOAT: "float" >
| < FOR: "for" >
| < GOTO: "goto" >
| < GRAPH : "graph" >
| < IF: "if" >
| < IMPLEMENTS: "implements" >
| < IMPORT: "import" >
| < IN: "in" >
| < INSTANCEOF: "instanceof" >
| < INT: "int" >
| < INTERFACE: "interface" >
| < LONG: "long" >
| < MAIN: "main" >
| < NATIVE: "native" >
| < NEW: "new" >
| < NULL: "null" >
| < OUT: "out" >
| < OPTIONAL: "optional" >
| < PACKAGE: "package" >
| < PORT: "port" >
| < PRIVATE: "private" >
| < PROPERTY: "property" >
| < PROTECTED: "protected" >
| < PUBLIC: "public" >
| < RECORD : "record" >
| < REQUIRED: "required" >
| < RETURN: "return" >
| < SHORT: "short" >
| < STATIC: "static" >
| < STRICTFP: "strictfp" >
| < SUPER: "super" >
| < SWITCH: "switch" >
| < SYNCHRONIZED: "synchronized" >
| < THIS: "this" >
| < THROW: "throw" >
| < THROWS: "throws" >
| < TRANSFORMATION : "transformation" > 
| < TRANSIENT: "transient" >
| < TRUE: "true" >
| < TRY: "try" >
| < VOID: "void" >
| < VOLATILE: "volatile" >
| < WHILE: "while" >
}


TOKEN : { < IDENTIFIER: <LETTER_OR_UNDERSCORE> (<LETTERS_OR_DIGITS_OR_UNDERSCORES>)* > }

/* COMMENTS */

MORE :
{
  <"/**" ~["/"]> { input_stream.backup(1); } : IN_FORMAL_COMMENT
|
  "/*" : IN_MULTI_LINE_COMMENT
}

SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT: "//" (~["\n", "\r"])* ("\n" | "\r" | "\r\n")?>
}

<IN_FORMAL_COMMENT>
SPECIAL_TOKEN :
{
  <FORMAL_COMMENT: "*/" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_FORMAL_COMMENT,IN_MULTI_LINE_COMMENT>
MORE :
{
  < ~[] >
}



/*
 * Transformation declaration
 */
void Transformation() : {
}
{
	Modifiers() "transformation" <IDENTIFIER> "{"
	( Modifiers() ( 
		ComponentDeclaration() 
		| 
		RecordDeclaration()
		|
		ComponentFieldDeclaration()
		) 
	)*
	ComponentConnection()
	"}"
	
}

/*
 * Transformation component declaration
 */
void ComponentDeclaration() : 
{
}
{
	// Modifiers already matched in the caller!
	"component" <IDENTIFIER> GenericTypeParameters() "{"
		ComponentBodyDeclaration() 
	  	MainBlock()
	"}"
}

void ComponentBodyDeclaration() :
{
	Modifiers modifiers;
	
}
{
	(
	 modifiers = Modifiers() 
	 ( 
		Port(modifiers) 
		| 
		Property()
		|
	  	MethodDeclaration(modifiers)
  	 )
  	)*
}

/*
 * Components connection into transformation graph
 */
void ComponentConnection() : {
}
{
	"graph" "{"
	( "connect" <IDENTIFIER> "." <IDENTIFIER> "->" 
				<IDENTIFIER> "." <IDENTIFIER>) *	
	"}"
}

Port Port(Modifiers modifiers) : 
{
	GenericType type;
	String name;
}
{
	 "port"  type = GenericTypeParameter()  <IDENTIFIER> { name = token.image; } ";"
	 { return new Port(type.getLine(),type.getColumn(),modifiers,name,type); }
}

ComponentProperty Property() :
{
	Type type;
	String name;
}
{
	"property" type = PropertyType() <IDENTIFIER> { name = token.image; } ";"
	{ return new ComponentProperty(type.getLine(), type.getColumn(),type,name); }
}



/*
 * Modifiers. We match all modifiers in a single rule to reduce the chances of
 * syntax errors for simple modifier mistakes. It will also enable us to give
 * better error messages.
 */

Modifiers Modifiers():
{
   int modifiers = 0;
}
{
 (
  LOOKAHEAD(2)
  (
   "public" { modifiers = Modifiers.addModifier(modifiers,Modifiers.PUBLIC,token); }
  |
   "static" { modifiers = Modifiers.addModifier(modifiers,Modifiers.STATIC,token);}
  |
   "protected" { modifiers = Modifiers.addModifier(modifiers,Modifiers.PROTECTED,token); }
  |
   "private" { modifiers = Modifiers.addModifier(modifiers,Modifiers.PRIVATE,token); }
  |
   "final" { modifiers = Modifiers.addModifier(modifiers,Modifiers.FINAL,token);}
  |
   "abstract" { modifiers = Modifiers.addModifier(modifiers,Modifiers.ABSTRACT,token);}
  |
   "synchronized" { modifiers = Modifiers.addModifier(modifiers,Modifiers.SYNCHRONIZED,token);}
  |
   "native" { modifiers = Modifiers.addModifier(modifiers,Modifiers.NATIVE,token);}
  |
   "transient" { modifiers = Modifiers.addModifier(modifiers,Modifiers.TRANSIENT,token);}
  |
   "volatile" { modifiers = Modifiers.addModifier(modifiers,Modifiers.VOLATILE,token);}
  |
   "strictfp" { modifiers = Modifiers.addModifier(modifiers,Modifiers.STRICTFP,token);}
  |
   "in" { modifiers = Modifiers.addModifier(modifiers,Modifiers.IN,token);}
  |
   "out" { modifiers = Modifiers.addModifier(modifiers,Modifiers.OUT,token);}
  |
   "optional" { modifiers = Modifiers.addModifier(modifiers,Modifiers.OPTIONAL,token);}
  |
   "required" { modifiers = Modifiers.addModifier(modifiers,Modifiers.REQUIRED,token);}
  )
 )*

 {
    return new Modifiers(modifiers);
 }
}

/* 
* Type parameters as defined in Java 1.5 grammar
*/
void GenericTypeParameters() :{}{   "<" GenericTypeParameter() ( "," GenericTypeParameter() )* ">"}


GenericType GenericTypeParameter():{
	String name;
	int line,column;
}{   <IDENTIFIER> 
   { 
   	name = token.image; line=token.beginLine; column=token.beginColumn;
   	return new GenericType(line,column,name);
   } }MethodDeclaration MethodDeclaration(Modifiers modifiers):
{
	Type type;
	String name;
	BlockStatement block = null;
	List throwsDeclaration = null;
	List parameters = null;
}
{
  // Modifiers already matched in the caller!
  type = ReturnType()
  <IDENTIFIER> { name = token.image; } 
  parameters = FormalParameters() 
  // old-style Java declaration not allowed in DataFormer ( "[" "]" { arrayCount++; } )* 
  [ "throws" throwsDeclaration = NameList() ]
  ( block = Block() | ";" )
  
  { return new MethodDeclaration(type.getLine(), type.getColumn(), modifiers, type, name, parameters, throwsDeclaration, block); }

}

Type ReturnType():
{
	Type ret;
}
{
  "void" { ret = new VoidType(token.beginLine, token.beginColumn); }
|
  LOOKAHEAD(2) ret = ReferenceType()
|
  ret = PrimitiveType()

  
  { return ret; }
}

ReferenceType ReferenceType():
{
	Type type;
	int arrayCount = 0;
}
{
	type = PrimitiveType() ( LOOKAHEAD(2) "[" "]" { arrayCount++; } )+
	|
	type = ClassOrInterfaceType() ( LOOKAHEAD(2) "[" "]" { arrayCount++; } )*
	
	{ return new ReferenceType(type.getLine(), type.getColumn(), type, arrayCount); }
}

ClassOrInterfaceType ClassOrInterfaceType():
{
	ClassOrInterfaceType ret;
	String name;
	int line;
	int column;
}
{
  <IDENTIFIER> {line=token.beginLine; column=token.beginColumn; name = token.image; } 
  { ret = new ClassOrInterfaceType(line, column, null, name); }
  ( LOOKAHEAD(2) "." <IDENTIFIER> { name = token.image; } 
    { ret = new ClassOrInterfaceType(line, column, ret, name); } )*
  { return ret; }
}

List TypeArguments():
{
	List ret = new LinkedList();
	Type type;
}
{
   "<" type = TypeArgument() { ret.add(type); } ( "," type = TypeArgument() { ret.add(type); } )* ">"
   { return ret; }
}

Type TypeArgument():
{
	Type ret;
}
{
 (
   ret = ReferenceType()
 |
   ret = Wildcard()
 )
 { return ret; }
}

WildcardType Wildcard():
{
	ReferenceType ext = null;
	ReferenceType sup = null;
	int line;
	int column;
}
{
   "?" {line=token.beginLine; column=token.beginColumn;}
   [
		"extends" ext = ReferenceType()
	|
		"super" sup = ReferenceType()
   ]
   { return new WildcardType(line, column, ext, sup); }
}

NameExpression Name():
/*
 * A lookahead of 2 is required below since "Name" can be followed
 * by a ".*" when used in the context of an "ImportDeclaration".
 */
{
	NameExpression ret;	
}
{
  <IDENTIFIER> { ret = new NameExpression(token.beginLine, token.beginColumn, token.image); }
  ( LOOKAHEAD(2) "." <IDENTIFIER> { ret = new QualifiedNameExpression(token.beginLine, token.beginColumn, ret, token.image); } )*
  { return ret; }
}

List NameList():
{
	List ret = null;
	NameExpression name;
}
{
  name = Name() { ret = add(ret,name); }  ( "," name = Name() { add(ret,name); } )*
  
  { return ret; }
}


Type PropertyType():
{
	Type ret;
}
{
   ret = Type()
   { return ret; }
}

Type Type() : 
{
	Type ret;
}
{
	(
	LOOKAHEAD(2) ret = ReferenceType()
	|
	ret = PrimitiveType()
	)
	
	{ return ret; }
}


List FormalParameters():
{
	List ret = null;
	Parameter param;
}
{
  "(" [ param = FormalParameter() { ret = add(ret,param); } 
  	( "," param = FormalParameter() { add(ret,param); } )* ] 
  ")"
  { return ret; }
}

Parameter FormalParameter():
{
	Modifiers mods;
	Type type;
	VariableDeclaratorId id;
	boolean isVarArg = false;
}
{
  mods = Modifiers() type = Type() [ "..." { isVarArg = true; }] id = VariableDeclaratorId()
  
  { return new Parameter(type.getLine(),type.getColumn(),mods,type,isVarArg,id); }
}



BlockStatement Block():
{
	Statement s;
	List statements = null;
	int line, column;
}
{
  "{" { line = token.beginLine; column = token.beginColumn; }
 	( s = BlockStatement() { statements = add(statements,s); }  )* 
  "}"
  { return new BlockStatement(line, column, statements); }
}

MainBlock MainBlock() :
{
	BlockStatement block;
	int line,column;
}
{
	"main" { line=token.beginLine; column=token.beginColumn;} block = Block()

	{ return new MainBlock(line,column,block); }
}



Type PrimitiveType():
{
	PrimitiveType ret;
}
{
(
  "boolean" { ret = new PrimitiveType(token.beginLine, token.beginColumn, PrimitiveType.PrimitiveTypeEnum.Boolean); }
|
  "char" { ret = new PrimitiveType(token.beginLine, token.beginColumn, PrimitiveType.PrimitiveTypeEnum.Char); }
|
  "byte" { ret = new PrimitiveType(token.beginLine, token.beginColumn, PrimitiveType.PrimitiveTypeEnum.Byte); }
|
  "short" { ret = new PrimitiveType(token.beginLine, token.beginColumn, PrimitiveType.PrimitiveTypeEnum.Short); }
|
  "int" { ret = new PrimitiveType(token.beginLine, token.beginColumn, PrimitiveType.PrimitiveTypeEnum.Int); }
|
  "long" { ret = new PrimitiveType(token.beginLine, token.beginColumn, PrimitiveType.PrimitiveTypeEnum.Long); }
|
  "float" { ret = new PrimitiveType(token.beginLine, token.beginColumn, PrimitiveType.PrimitiveTypeEnum.Float); }
|
  "double" { ret = new PrimitiveType(token.beginLine, token.beginColumn, PrimitiveType.PrimitiveTypeEnum.Double); }
)
{ return ret; }
}


Statement BlockStatement():
{
	Expression expr;
	Statement statement;
}

{
 LOOKAHEAD( Modifiers() Type() <IDENTIFIER> )
  expr = LocalVariableDeclaration() ";"
  { return new ExpressionStatement(expr.getLine(),expr.getColumn(),expr); }
|
  statement = Statement()
  { return statement; }
}

VariableDeclarationExpression LocalVariableDeclaration():
{
	Modifiers modifiers;
	Type type;
	VariableDeclarator var;
	List declarators = null;
}

{
  modifiers = Modifiers() 
  type = Type() 
  var = VariableDeclarator()
  { declarators = add(declarators,var); }
  ( "," var = VariableDeclarator() { add(declarators,var); })*
  
  { return new VariableDeclarationExpression(type.getLine(),type.getColumn(),modifiers,type,declarators); }
}

VariableDeclarator VariableDeclarator():
{
	VariableDeclaratorId id;
	Expression init = null;	
}
{
  id = VariableDeclaratorId() [ "=" init = VariableInitializer() ]
  { return new VariableDeclarator(id.getLine(), id.getColumn(), id, init); }
}

VariableDeclaratorId VariableDeclaratorId():
{
	int line,column;
	int arrayCount = 0;
	String name; 
}
{
  <IDENTIFIER> { name = token.image; line = token.beginLine; column = token.beginColumn; } 
  ( "[" "]" { arrayCount++; })*
  
  { return new VariableDeclaratorId(line,column,name,arrayCount); }
}


Expression VariableInitializer():
{
	Expression expr;
}
{
	
  expr = ArrayInitializer()|
  expr = Expression()
  
  { return expr; }
}

ArrayInitializerExpr ArrayInitializer():
{
	List values = null;
	Expression val;
	int line;
	int column;
}
{
  "{" {line=token.beginLine; column=token.beginColumn;} 
  [ val = VariableInitializer() { values = add(values, val); } ( LOOKAHEAD(2) "," val = VariableInitializer() { values = add(values, val); } )* ] [ "," ] 
  "}"
  
  { return new ArrayInitializerExpr(line, column, values); }
}

Expression Expression() #void:
{}
{
  LOOKAHEAD( PrimaryExpression() "=" )
  Assignment()
|
  ConditionalExpression()
  
  { return null; }
}

void Assignment() :
{}
{
  PrimaryExpression() "=" Expression()
}

void ConditionalExpression():
{}
{
  ConditionalOrExpression() [ "?" Expression() ":" Expression() ]
}

void ConditionalOrExpression():
{}
{
  ConditionalAndExpression() ( "||" ConditionalAndExpression() )*
}

void ConditionalAndExpression():
{}
{
  InclusiveOrExpression() ( "&&" InclusiveOrExpression() )*
}

void InclusiveOrExpression():
{}
{
  ExclusiveOrExpression() ( "|" ExclusiveOrExpression() )*
}

void ExclusiveOrExpression():
{}
{
  AndExpression() ( "^" AndExpression() )*
}

void AndExpression():
{}
{
  EqualityExpression() ( "&" EqualityExpression() )*
}

void EqualityExpression():
{}
{
  RelationalExpression() ( ( "==" | "!=" ) RelationalExpression() )*
}

void RelationalExpression():
{}
{
  ShiftExpression() ( ( "<" | ">" | "<=" | ">=" ) ShiftExpression() )*
}

void ShiftExpression():
{}
{
	AdditiveExpression() ( ( "<<" | RSIGNEDSHIFT() ) AdditiveExpression() )*
}

void AdditiveExpression():
{}
{
  MultiplicativeExpression() ( ( "+" | "-" ) MultiplicativeExpression() )*
}

void MultiplicativeExpression():
{}
{
  UnaryExpression() ( ( "*" | "/" | "%" ) UnaryExpression() )*
}

void UnaryExpression():
{}
{
  ( "+" | "-" ) UnaryExpression()
|
  PreIncrementExpression()
|
  PreDecrementExpression()
|
  UnaryExpressionNotPlusMinus()
}

void PreIncrementExpression():
{}
{
  "++" PrimaryExpression()
}

void PreDecrementExpression():
{}
{
  "--" PrimaryExpression()
}

void UnaryExpressionNotPlusMinus():
{}
{
  ( "~" | "!" ) UnaryExpression()
|
  PostfixExpression()
}

void PostfixExpression():
{}
{
  PrimaryExpression() [ "++" | "--" ]
}

Expression PrimaryExpression():
{
	Expression ret;
}
{
  ret = PrimaryPrefix() ( LOOKAHEAD(2) ret = PrimarySuffix(ret) )*
  { return ret; }

}

Expression PrimaryPrefix():
{
	Expression ret;
	List args = null;
	String name;
	int line,column;
	boolean hasArgs = false;
}
{
	
  (
 	 ret = Literal()
  |
 	 "(" ret = Expression() ")"  |
  	(
	  	<IDENTIFIER> { name = token.image; line=token.beginLine; column=token.beginColumn; }  [ args = Arguments() {hasArgs=true;} ] 
	  	{
	  		ret = hasArgs 
	  			? new MethodCallExpression(line, column, null, name, args)
	  			: new NameExpression(line, column, name);
	  	}
	)
  )
  
  { return ret; }
}

Expression PrimarySuffix(Expression scope):
{
	Expression ret;
	List args = null;
	String name;
	int line,column;
	boolean hasArgs = false;
}
{
  (
    (
  	  "."	<IDENTIFIER> { name = token.image; line=token.beginLine; column=token.beginColumn; }  [ args = Arguments() {hasArgs=true;} ] 
	  	{
	  		ret = hasArgs 
	  			? new MethodCallExpression(line, column, scope, name, args)
	  			: new FieldAccessExpression(line, column, scope, name);
	  	}
	)
  |
	  "[" {line=token.beginLine; column=token.beginColumn;} ret = Expression() "]" { ret = new ArrayAccessExpression(line, column, scope, ret); }
  )
  { return ret; }

}


void Id() :
{
}
{
   <IDENTIFIER>  
}

Expression Literal():
{
	Expression ret;
}
{
  (
  <INTEGER_LITERAL> 
  { ret = new IntegerLiteralExpression(token.beginLine,token.beginColumn,token.image); }
|
  ret = BooleanLiteral()
  )
  { return ret; }
}

Expression BooleanLiteral():
{
	Expression ret;
}
{
  (
  "true" 
  { ret = new BooleanLiteralExpression(token.beginLine,token.beginColumn,Boolean.TRUE); }
|
  "false"
  { ret = new BooleanLiteralExpression(token.beginLine,token.beginColumn,Boolean.FALSE); }
  )
  { return ret; }
}

Statement Statement():{
	Statement ret;
}{
//  LOOKAHEAD(2)//  LabeledStatement()//|//  AssertStatement()//|
(  ret = Block()|  ret = EmptyStatement()|  StatementExpression() ";"//|//  SwitchStatement()|  IfStatement()|  WhileStatement()//|//  DoStatement()//|//  ForStatement()//|//  BreakStatement()//|//  ContinueStatement()|  ReturnStatement()//|//  ThrowStatement()//|//  SynchronizedStatement()//|//  TryStatement()

)
	{ return null; }}EmptyStatement EmptyStatement():{}{  ";"
  { return new EmptyStatement(token.beginLine, token.beginColumn); }}

void IfStatement():
/*
 * The disambiguating algorithm of JavaCC automatically binds dangling
 * else's to the innermost if statement.  The LOOKAHEAD specification
 * is to tell JavaCC that we know what we are doing.
 */
{}
{
  "if" "(" Expression() ")" Statement() [ LOOKAHEAD(1) "else" Statement() ]
}

void WhileStatement():
{}
{
  "while" "(" Expression() ")" Statement()
}

void DoStatement():
{}
{
  "do" Statement() "while" "(" Expression() ")" ";"
}

void ReturnStatement():
{}
{
  "return" [ Expression() ] ";"
}


void RSIGNEDSHIFT():
{}
{
  ( LOOKAHEAD({ getToken(1).kind == GT &&
                ((GTToken)getToken(1)).realKind == RSIGNEDSHIFT} )
  ">" ">"
  )
}

List Arguments():
{
	List ret = null;
}

{
  "(" [ ret = ArgumentList() ] ")"
  { return ret; }
}

List ArgumentList():
{
	List ret = null;
	Expression expr;
}
{
  expr = Expression() { add(ret,expr); } ( "," expr = Expression() { add(ret,expr);} )*
  { return ret; }
}

void StatementExpression():
/*
 * The last expansion of this production accepts more than the legal
 * Java expansions for StatementExpression.  This expansion does not
 * use PostfixExpression for performance reasons.
 */
{}
{
  PreIncrementExpression()
|
  PreDecrementExpression()
|
  PrimaryExpression()
  [
    "++"
  |
    "--"
  |
    AssignmentOperator() Expression()
  |
  	StreamStatement()
  ]
  
}

void AssignmentOperator():
{}
{
  "=" | "*=" | "/=" | "%=" | "+=" | "-=" | "<<=" | ">>=" | ">>>=" | "&=" | "^=" | "|="
}


void StreamStatement():
{}
{
	( "<<" | RSIGNEDSHIFT() )
	Id()
}


void ComponentFieldDeclaration():
{}
{
	ComponentClassName() 
	ComponentInputOutputTypeList()
	<IDENTIFIER>
	[ ComponentInlineImplementation() ] ";"	
}

void ComponentInputOutputTypeList() :
{}
{
	"<" ComponentInputOutputType() ( "," ComponentInputOutputType() )* ">"
}

void ComponentInputOutputType() :
{}
{
	<IDENTIFIER>
}

void ComponentClassName() :
{}
{
	<IDENTIFIER>
}

	
void ComponentInlineImplementation() :
{}
{
	"{" 
		ComponentBodyDeclaration() 
	"}"
}






void RecordDeclaration() : {
	Token tok;
}
{
	// Modifiers already matched in the caller!
	"record"
	tok = <IDENTIFIER>
	{ 
		jjtThis.name = tok.image;
	}
	"{"
		(FieldDeclaration() ";")+
	"}"		
}


void FieldDeclaration() #void: 
{
	Token dataType;
	Token identifier;
	Token delimiter;
	Token size;
} 
{
	(dataType = <INT> | dataType = <BOOLEAN> ) 
	
	identifier = <IDENTIFIER>
	
	 "(" ( 
	 	(size = <INTEGER_LITERAL>
		 	{ 
		 	  jjtThis.type = dataType.kind; 
		 	  jjtThis.name = identifier.image;
		 	  jjtThis.length = Integer.parseInt(size.image);
			}	 
	 	) #FixedRecordField() 
	 	| 
	 	(delimiter = <STRING>
		 	{ 
		 	  jjtThis.type = dataType.kind; 
		 	  jjtThis.name = identifier.image;
		 	  jjtThis.delimiter = delimiter.image;
			} 
	 	) #DelimitedRecordField()
	 	 ) ")"
	
}



