/**
 * JavaCC file
 */
 
options {
  JDK_VERSION = "1.5";
  STATIC = false;
  MULTI=true;
  VISITOR=true;
  VISITOR_EXCEPTION = "VisitorException";
  DEBUG_PARSER=true;
}
PARSER_BEGIN(GraphParser)
package cz.dataformer;
public class GraphParser {
	private String debugField;
}
PARSER_END(GraphParser)

// public record <recordname> {
// int a(10);
// int b("|")
// }

SKIP : { " "|"\r"|"\t"|"\n"|"\f" }

TOKEN: { < #LETTER_OR_UNDERSCORE: (["a"-"z", "A"-"Z", "_"])+ > }
TOKEN: { < #LETTERS_OR_DIGITS_OR_UNDERSCORES: (["a"-"z", "A"-"Z", "0"-"9", "_"])+ > }

TOKEN :
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL> (["l","L"])?
      | <HEX_LITERAL> (["l","L"])?
      | <OCTAL_LITERAL> (["l","L"])?
  >
|
  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
|
  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|
  < #OCTAL_LITERAL: "0" (["0"-"7"])* >
}

TOKEN : 
{
	< STRING_TYPE : "String" >
}


TOKEN :
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < SEMICOLON: ";" >
| < COMMA: "," >
| < DOT: "." >
| < AT: "@" >
}

TOKEN :
{
  < ASSIGN: "=" >
| < LT: "<" >
| < BANG: "!" >
| < TILDE: "~" >
| < HOOK: "?" >
| < COLON: ":" >
| < EQ: "==" >
| < LE: "<=" >
| < GE: ">=" >
| < NE: "!=" >
| < SC_OR: "||" >
| < SC_AND: "&&" >
| < INCR: "++" >
| < DECR: "--" >
| < PLUS: "+" >
| < MINUS: "-" >
| < STAR: "*" >
| < SLASH: "/" >
| < BIT_AND: "&" >
| < BIT_OR: "|" >
| < XOR: "^" >
| < REM: "%" >
| < LSHIFT: "<<" >
| < PLUSASSIGN: "+=" >
| < MINUSASSIGN: "-=" >
| < STARASSIGN: "*=" >
| < SLASHASSIGN: "/=" >
| < ANDASSIGN: "&=" >
| < ORASSIGN: "|=" >
| < XORASSIGN: "^=" >
| < REMASSIGN: "%=" >
| < LSHIFTASSIGN: "<<=" >
| < RSIGNEDSHIFTASSIGN: ">>=" >
| < RUNSIGNEDSHIFTASSIGN: ">>>=" >
| < ELLIPSIS: "..." >
}


/* >'s need special attention due to generics syntax. */
TOKEN :
{
 < RSIGNEDSHIFT: ">>" >
  {
     matchedToken.kind = GT;
     ((GTToken)matchedToken).realKind = RSIGNEDSHIFT;
     input_stream.backup(1);
     matchedToken.image = ">";
  }
| < GT: ">" >
}



TOKEN: { < STRING :
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
  	>
  }

TOKEN :
{
  < ABSTRACT: "abstract" >
| < ASSERT: "assert" >
| < BOOLEAN: "boolean" >
| < BREAK: "break" >
| < BYTE: "byte" >
| < CASE: "case" >
| < CATCH: "catch" >
| < CHAR: "char" >
| < CLASS: "class" >
| < COMPONENT : "component" >
| < CONNECT : "connect" >
| < CONST: "const" >
| < CONTINUE: "continue" >
| < _DEFAULT: "default" >
| < DO: "do" >
| < DOUBLE: "double" >
| < ELSE: "else" >
| < ENUM: "enum" >
| < EXTENDS: "extends" >
| < FALSE: "false" >
| < FINAL: "final" >
| < FINALLY: "finally" >
| < FLOAT: "float" >
| < FOR: "for" >
| < GOTO: "goto" >
| < GRAPH : "graph" >
| < IF: "if" >
| < IMPLEMENTS: "implements" >
| < IMPORT: "import" >
| < IN: "in" >
| < INSTANCEOF: "instanceof" >
| < INT: "int" >
| < INTERFACE: "interface" >
| < LONG: "long" >
| < MAIN: "main" >
| < NATIVE: "native" >
| < NEW: "new" >
| < NULL: "null" >
| < OUT: "out" >
| < OPTIONAL: "optional" >
| < PACKAGE: "package" >
| < PORT: "port" >
| < PRIVATE: "private" >
| < PROPERTY: "property" >
| < PROTECTED: "protected" >
| < PUBLIC: "public" >
| < RECORD : "record" >
| < REQUIRED: "required" >
| < RETURN: "return" >
| < SHORT: "short" >
| < STATIC: "static" >
| < STRICTFP: "strictfp" >
| < SUPER: "super" >
| < SWITCH: "switch" >
| < SYNCHRONIZED: "synchronized" >
| < THIS: "this" >
| < THROW: "throw" >
| < THROWS: "throws" >
| < TRANSFORMATION : "transformation" > 
| < TRANSIENT: "transient" >
| < TRUE: "true" >
| < TRY: "try" >
| < VOID: "void" >
| < VOLATILE: "volatile" >
| < WHILE: "while" >
}


TOKEN : { < IDENTIFIER: <LETTER_OR_UNDERSCORE> (<LETTERS_OR_DIGITS_OR_UNDERSCORES>)* > }

/*
 * Transformation declaration
 */
void Transformation() : {
}
{
	Modifiers() "transformation" <IDENTIFIER> "{"
	Modifiers()	( ComponentDeclaration() | RecordDeclaration() )*
	ComponentConnection()
	"}"
	
}

/*
 * Transformation component declaration
 */
void ComponentDeclaration() : 
{
}
{
	// Modifiers already matched in the caller!
	"component" <IDENTIFIER> TypeParameters() "{"
		( ComponentBodyDeclaration() )*
	  	MainBlock()
	"}"
}

void ComponentBodyDeclaration() :
{
	int modifiers = 0;
}
{
	Modifiers() 
	( 
		Port() 
		| 
		Property()
		|
	  	MethodDeclaration(modifiers)
  	)
}

/*
 * Components connection into transformation graph
 */
void ComponentConnection() : {
}
{
	"graph" "{"
	( "connect" <IDENTIFIER> "." <IDENTIFIER> "->" 
				<IDENTIFIER> "." <IDENTIFIER>) *	
	"}"
}

void Port() : 
{
}
{
	 "port"  TypeParameter()   <IDENTIFIER> ";"
}

void Property() :
{
}
{
	"property" PropertyType() <IDENTIFIER> ";"
}



/*
 * Modifiers. We match all modifiers in a single rule to reduce the chances of
 * syntax errors for simple modifier mistakes. It will also enable us to give
 * better error messages.
 */

int Modifiers():
{
   int modifiers = 0;
}
{
 (
  LOOKAHEAD(2)
  (
   "public" { modifiers |= ModifierSet.PUBLIC; }
  |
   "static" { modifiers |= ModifierSet.STATIC; }
  |
   "protected" { modifiers |= ModifierSet.PROTECTED; }
  |
   "private" { modifiers |= ModifierSet.PRIVATE; }
  |
   "final" { modifiers |= ModifierSet.FINAL; }
  |
   "abstract" { modifiers |= ModifierSet.ABSTRACT; }
  |
   "synchronized" { modifiers |= ModifierSet.SYNCHRONIZED; }
  |
   "native" { modifiers |= ModifierSet.NATIVE; }
  |
   "transient" { modifiers |= ModifierSet.TRANSIENT; }
  |
   "volatile" { modifiers |= ModifierSet.VOLATILE; }
  |
   "strictfp" { modifiers |= ModifierSet.STRICTFP; }
  |
   "in" { modifiers |= ModifierSet.IN; }
  |
   "out" { modifiers |= ModifierSet.OUT; }
  |
   "optional" { modifiers |= ModifierSet.OPTIONAL; }
  |
   "required" { modifiers |= ModifierSet.REQUIRED; }
  )
 )*

 {
    return modifiers;
 }
}

/* 
* Type parameters as defined in Java 1.5 grammar
*/
void TypeParameters() :{}{   "<" TypeParameter() ( "," TypeParameter() )* ">"}


void TypeParameter():{}{   <IDENTIFIER> }void MethodDeclaration(int modifiers):
{}
{
  // Modifiers already matched in the caller!
  ResultType()
  MethodDeclarator() //[ "throws" NameList() ]
  ( Block() | ";" )

}

void ResultType():
{}
{
  "void"
|
  PrimitiveType() [ "[" "]" ]
}


void PropertyType():
{}
{
   PrimitiveType() [ "[" "]" ]
}

void Type() : 
{}
{
	PrimitiveType() [ "[" "]" ]
	|
	// this is to match method parameters - should be replaced by proper type
	<IDENTIFIER>
}


void MethodDeclarator():
{}
{
  <IDENTIFIER> FormalParameters() ( "[" "]" )*
}

void FormalParameters():
{}
{
  "(" [ FormalParameter() ( "," FormalParameter() )* ] ")"
}

void FormalParameter():
{}
{
  Modifiers() Type() [ "..." ] VariableDeclaratorId()
}



void Block():
{}
{
  "{" 
 ( BlockStatement() )* 
  "}"
}

void MainBlock() :
{
}
{
	"main" Block()
}



void PrimitiveType():
{}
{
  "boolean"
|
  "char"
|
  "byte"
|
  "short"
|
  "int"
|
  "long"
|
  "float"
|
  "double"
|
  "String" // treated as primary temporarily
}


void BlockStatement():
{}
{
 LOOKAHEAD( Modifiers() Type() <IDENTIFIER> )
  LocalVariableDeclaration() ";"
|
  Statement()
}

void LocalVariableDeclaration():
{}
{
  Modifiers() Type() VariableDeclarator() ( "," VariableDeclarator() )*
}

void VariableDeclarator():
{}
{
  VariableDeclaratorId() [ "=" VariableInitializer() ]
}

void VariableDeclaratorId():
{}
{
  <IDENTIFIER> ( "[" "]" )*
}


void VariableInitializer():
{}
{
	
//  ArrayInitializer()//|
  Expression()
}

void Expression() #void:
{}
{
  LOOKAHEAD( PrimaryExpression() "=" )
  Assignment()
|
  ConditionalExpression()
}

void Assignment() :
{}
{
  PrimaryExpression() "=" Expression()
}

void ConditionalExpression():
{}
{
  ConditionalOrExpression() [ "?" Expression() ":" Expression() ]
}

void ConditionalOrExpression():
{}
{
  ConditionalAndExpression() ( "||" ConditionalAndExpression() )*
}

void ConditionalAndExpression():
{}
{
  InclusiveOrExpression() ( "&&" InclusiveOrExpression() )*
}

void InclusiveOrExpression():
{}
{
  ExclusiveOrExpression() ( "|" ExclusiveOrExpression() )*
}

void ExclusiveOrExpression():
{}
{
  AndExpression() ( "^" AndExpression() )*
}

void AndExpression():
{}
{
  EqualityExpression() ( "&" EqualityExpression() )*
}

void EqualityExpression():
{}
{
  RelationalExpression() ( ( "==" | "!=" ) RelationalExpression() )*
}

void RelationalExpression():
{}
{
  ShiftExpression() ( ( "<" | ">" | "<=" | ">=" ) ShiftExpression() )*
}

void ShiftExpression():
{}
{
	AdditiveExpression() ( ( "<<" | RSIGNEDSHIFT() ) AdditiveExpression() )*
}

void AdditiveExpression():
{}
{
  MultiplicativeExpression() ( ( "+" | "-" ) MultiplicativeExpression() )*
}

void MultiplicativeExpression():
{}
{
  UnaryExpression() ( ( "*" | "/" | "%" ) UnaryExpression() )*
}

void UnaryExpression():
{}
{
  ( "+" | "-" ) UnaryExpression()
|
  PreIncrementExpression()
|
  PreDecrementExpression()
|
  UnaryExpressionNotPlusMinus()
}

void PreIncrementExpression():
{}
{
  "++" PrimaryExpression()
}

void PreDecrementExpression():
{}
{
  "--" PrimaryExpression()
}

void UnaryExpressionNotPlusMinus():
{}
{
  ( "~" | "!" ) UnaryExpression()
|
  PostfixExpression()
}

void PostfixExpression():
{}
{
  PrimaryExpression() [ "++" | "--" ]
}

void PrimaryExpression():
{}
{
  PrimaryPrefix() ( LOOKAHEAD(2) PrimarySuffix() )*
}

void PrimaryPrefix():
{}
{
  Literal()
//|//  LOOKAHEAD( ( <IDENTIFIER> "." )* "this" )//  ( <IDENTIFIER> "." )*//  "this"//|//  "super" "." <IDENTIFIER>//|//  "(" Expression() ")"//|//  AllocationExpression()//|//  LOOKAHEAD( ResultType() "." "class" )//  ResultType() "." "class"
|
  Name()
}

void PrimarySuffix():
{}
{
//  LOOKAHEAD("." "super" ".")//  "." "super"//|//  LOOKAHEAD("." "this")//  "." "this"//|//  LOOKAHEAD(2)//  "." AllocationExpression()//|
  LOOKAHEAD(3)
  MemberSelector()
|
  "[" Expression() "]"
|
  "." <IDENTIFIER>
|
  Arguments()
}

void MemberSelector():
{}
{
  "." /*TypeArguments()*/ <IDENTIFIER>
}



void Id() :
{
}
{
   <IDENTIFIER>  
}

void Literal() #void :
{}
{
  <INTEGER_LITERAL>
|
  BooleanLiteral()
}

void BooleanLiteral() #void :
{}
{
  "true" #TrueNode
|
  "false" #FalseNode
}

void Statement():{}{
//  LOOKAHEAD(2)//  LabeledStatement()//|//  AssertStatement()//|  Block()|  EmptyStatement()//|//  StatementExpression() ";"//|//  SwitchStatement()|  IfStatement()|  WhileStatement()//|//  DoStatement()//|//  ForStatement()//|//  BreakStatement()//|//  ContinueStatement()//|//  ReturnStatement()//|//  ThrowStatement()//|//  SynchronizedStatement()//|//  TryStatement()}void EmptyStatement():{}{  ";"}

void IfStatement():
/*
 * The disambiguating algorithm of JavaCC automatically binds dangling
 * else's to the innermost if statement.  The LOOKAHEAD specification
 * is to tell JavaCC that we know what we are doing.
 */
{}
{
  "if" "(" Expression() ")" Statement() [ LOOKAHEAD(1) "else" Statement() ]
}

void WhileStatement():
{}
{
  "while" "(" Expression() ")" Statement()
}

void DoStatement():
{}
{
  "do" Statement() "while" "(" Expression() ")" ";"
}

void RSIGNEDSHIFT():
{}
{
  ( LOOKAHEAD({ getToken(1).kind == GT &&
                ((GTToken)getToken(1)).realKind == RSIGNEDSHIFT} )
  ">" ">"
  )
}

void Name():
/*
 * A lookahead of 2 is required below since "Name" can be followed
 * by a ".*" when used in the context of an "ImportDeclaration".
 */
{}
{
  <IDENTIFIER>
  ( LOOKAHEAD(2) "." <IDENTIFIER>
  )*
}


void Arguments():
{}
{
  "(" [ ArgumentList() ] ")"
}

void ArgumentList():
{}
{
  Expression() ( "," Expression() )*
}






void RecordDeclaration() : {
	Token tok;
}
{
	// Modifiers already matched in the caller!
	"record"
	tok = <IDENTIFIER>
	{ 
		jjtThis.name = tok.image;
	}
	"{"
		(FieldDeclaration() ";")+
	"}"		
}


void FieldDeclaration() #void: 
{
	Token dataType;
	Token identifier;
	Token delimiter;
	Token size;
} 
{
	(dataType = <INT> | dataType = <BOOLEAN> ) 
	
	identifier = <IDENTIFIER>
	
	 "(" ( 
	 	(size = <INTEGER_LITERAL>
		 	{ 
		 	  jjtThis.type = dataType.kind; 
		 	  jjtThis.name = identifier.image;
		 	  jjtThis.length = Integer.parseInt(size.image);
			}	 
	 	) #FixedRecordField() 
	 	| 
	 	(delimiter = <STRING>
		 	{ 
		 	  jjtThis.type = dataType.kind; 
		 	  jjtThis.name = identifier.image;
		 	  jjtThis.delimiter = delimiter.image;
			} 
	 	) #DelimitedRecordField()
	 	 ) ")"
	
}



