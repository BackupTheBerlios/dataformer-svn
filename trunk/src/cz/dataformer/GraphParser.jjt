/**
 * JavaCC file
 */
 
options {
  JDK_VERSION = "1.5";
  STATIC = false;
  MULTI=true;
  VISITOR=true;
  VISITOR_EXCEPTION = "VisitorException";
  DEBUG_PARSER=true;
}
PARSER_BEGIN(GraphParser)
package cz.dataformer;
public class GraphParser {
	private String debugField;
}
PARSER_END(GraphParser)

// public record <recordname> {
// int a(10);
// int b("|")
// }

SKIP : { " "|"\r"|"\t"|"\n"|"\f" }

TOKEN: { < #LETTER_OR_UNDERSCORE: (["a"-"z", "A"-"Z", "_"])+ > }
TOKEN: { < #LETTERS_OR_DIGITS_OR_UNDERSCORES: (["a"-"z", "A"-"Z", "0"-"9", "_"])+ > }
TOKEN: { < #DIGIT: ["0"-"9"] > }



TOKEN: 
{ 
  < LBRACE: "{" > 
| < RBRACE: "}" >
| < GT: ">" >
| < LT: "<" >
| < SEMICOLON: ";" > 
| < COMMA: "," >
| < APOSTROPHE: "\""> 
}

TOKEN: { < NUMBER: (<DIGIT>)+ > }
TOKEN: { < STRING :
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
  	>
  }

TOKEN :
{
  < ABSTRACT: "abstract" >
| < ASSERT: "assert" >
| < BOOLEAN: "boolean" >
| < BREAK: "break" >
| < BYTE: "byte" >
| < CASE: "case" >
| < CATCH: "catch" >
| < CHAR: "char" >
| < CLASS: "class" >
| < COMPONENT : "component" >
| < CONNECT : "connect" >
| < CONST: "const" >
| < CONTINUE: "continue" >
| < _DEFAULT: "default" >
| < DO: "do" >
| < DOUBLE: "double" >
| < ELSE: "else" >
| < ENUM: "enum" >
| < EXTENDS: "extends" >
| < FALSE: "false" >
| < FINAL: "final" >
| < FINALLY: "finally" >
| < FLOAT: "float" >
| < FOR: "for" >
| < GOTO: "goto" >
| < GRAPH : "graph" >
| < IF: "if" >
| < IMPLEMENTS: "implements" >
| < IMPORT: "import" >
| < IN: "in" >
| < INSTANCEOF: "instanceof" >
| < INT: "int" >
| < INTERFACE: "interface" >
| < LONG: "long" >
| < NATIVE: "native" >
| < NEW: "new" >
| < NULL: "null" >
| < OUT: "out" >
| < OPTIONAL: "optional" >
| < PACKAGE: "package" >
| < PORT: "port" >
| < PRIVATE: "private" >
| < PROPERTY: "property" >
| < PROTECTED: "protected" >
| < PUBLIC: "public" >
| < RECORD : "record" >
| < REQUIRED: "required" >
| < RETURN: "return" >
| < SHORT: "short" >
| < STATIC: "static" >
| < STRICTFP: "strictfp" >
| < SUPER: "super" >
| < SWITCH: "switch" >
| < SYNCHRONIZED: "synchronized" >
| < THIS: "this" >
| < THROW: "throw" >
| < THROWS: "throws" >
| < TRANSFORMATION : "transformation" > 
| < TRANSIENT: "transient" >
| < TRUE: "true" >
| < TRY: "try" >
| < VOID: "void" >
| < VOLATILE: "volatile" >
| < WHILE: "while" >
}


TOKEN : { < IDENTIFIER: <LETTER_OR_UNDERSCORE> (<LETTERS_OR_DIGITS_OR_UNDERSCORES>)* > }

/*
 * Transformation declaration
 */
void Transformation() : {
}
{
	Modifiers() "transformation" <IDENTIFIER> "{"
	( ComponentDeclaration() )*
	ComponentConnection()
	"}"
	
}

/*
 * Transformation component declaration
 */
void ComponentDeclaration() : 
{
}
{
	Modifiers() "component" <IDENTIFIER> "{"
		( 
		 PortOrPropertyDeclaration()
	    )*
	"}"
}

void PortOrPropertyDeclaration() :
{
}
{
	Modifiers() ( Port() | Property() )
}

/*
 * Components connection into transformation graph
 */
void ComponentConnection() : {
}
{
	"graph" "{"
	( "connect" <IDENTIFIER> "." <IDENTIFIER> "->" 
				<IDENTIFIER> "." <IDENTIFIER>) *	
	"}"
}

void Port() : 
{
}
{
	 "port" [ "<" TypeParameter() ">" ] <IDENTIFIER> ";"
}

void Property() :
{
}
{
	"property" ClassOrInterfaceType() <IDENTIFIER> ";"
}



/*
 * Modifiers. We match all modifiers in a single rule to reduce the chances of
 * syntax errors for simple modifier mistakes. It will also enable us to give
 * better error messages.
 */

int Modifiers():
{
   int modifiers = 0;
}
{
 (
  LOOKAHEAD(2)
  (
   "public" { modifiers |= ModifierSet.PUBLIC; }
  |
   "static" { modifiers |= ModifierSet.STATIC; }
  |
   "protected" { modifiers |= ModifierSet.PROTECTED; }
  |
   "private" { modifiers |= ModifierSet.PRIVATE; }
  |
   "final" { modifiers |= ModifierSet.FINAL; }
  |
   "abstract" { modifiers |= ModifierSet.ABSTRACT; }
  |
   "synchronized" { modifiers |= ModifierSet.SYNCHRONIZED; }
  |
   "native" { modifiers |= ModifierSet.NATIVE; }
  |
   "transient" { modifiers |= ModifierSet.TRANSIENT; }
  |
   "volatile" { modifiers |= ModifierSet.VOLATILE; }
  |
   "strictfp" { modifiers |= ModifierSet.STRICTFP; }
  |
   "in" { modifiers |= ModifierSet.IN; }
  |
   "out" { modifiers |= ModifierSet.OUT; }
  |
   "optional" { modifiers |= ModifierSet.OPTIONAL; }
  |
   "required" { modifiers |= ModifierSet.REQUIRED; }
  )
 )*

 {
    return modifiers;
 }
}

/* 
* Type parameters as defined in Java 1.5 grammar
*/
//void JavaTypeParameters()://{}//{//   "<" TypeParameter() ( "," TypeParameter() )* ">"//}


void TypeParameter():{}{   <IDENTIFIER> [ TypeBound() ]}void TypeBound():{}{   "extends" ClassOrInterfaceType() ( "&" ClassOrInterfaceType() )*}void ClassOrInterfaceType():{}{  <IDENTIFIER> [ LOOKAHEAD(2) TypeArguments() ]  ( LOOKAHEAD(2) "." <IDENTIFIER> [ LOOKAHEAD(2) TypeArguments() ] )*}void TypeArguments():{}{   "<" TypeArgument() ( "," TypeArgument() )* ">"}void TypeArgument():{}{//   ReferenceType()// |   "?" //[ WildcardBounds() ]}



void RecordDeclaration() : {
	Token tok;
}
{
	Modifiers()
	"record"
	tok = <IDENTIFIER>
	{ 
		jjtThis.name = tok.image;
	}
	"{"
		(FieldDeclaration() ";")+
	"}"		
}


void FieldDeclaration() #void: 
{
	Token dataType;
	Token identifier;
	Token delimiter;
	Token size;
} 
{
	(dataType = <INT> | dataType = <BOOLEAN> ) 
	
	identifier = <IDENTIFIER>
	
	 "(" ( 
	 	(size = <NUMBER>
		 	{ 
		 	  jjtThis.type = dataType.kind; 
		 	  jjtThis.name = identifier.image;
		 	  jjtThis.length = Integer.parseInt(size.image);
			}	 
	 	) #FixedRecordField() 
	 	| 
	 	(delimiter = <STRING>
		 	{ 
		 	  jjtThis.type = dataType.kind; 
		 	  jjtThis.name = identifier.image;
		 	  jjtThis.delimiter = delimiter.image;
			} 
	 	) #DelimitedRecordField()
	 	 ) ")"
	
}



