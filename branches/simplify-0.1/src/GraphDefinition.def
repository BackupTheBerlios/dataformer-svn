package cz.dataformer.test;

public transformation MyTransformation {

	public component Filter<I> {
		out port I validOutput;
		in port I input;
		optional out port I invalidOutput;

		abstract boolean testCondition(I inputRecord);
		
		main {
			I rec;
			while (rec << input) {
				if (testCondition(rec)) {
					rec >> validOutput;
				} else {
					rec >> invalidOutput;
				}
			}
		}
	}

	// record structure expected by the filter specification below
 	public record FilterMetaRecord {
 		int firstField delimiter(",");
 		boolean thirdField delimiter("\n");
 	}

	// filter component "data interface" definition ("specification" for a data type)
	public component Filter<I extends FilterMetaRecord> extends Filter<I> {
		private int filterThreshold;

		public Filter(int threshold) {
			filterThreshold = threshold;
		}
		
		boolean testCondition(I inputRecord) {
			return inputRecord.code > filterThreshold && inputRecord.flag;
		}
	}

	public component Generator<T> {
		public out port T output;
		
		private T generateMessage();
		
		main {
			for (int i=0; i<3; i++) {
				generateMessage() >> output;
			}
			
			int[] mmb = {1,2,3};
			for (int i : mmb) {
				generateMessage() >> output;
			}
		}
	}
	

	// generator "implementation" for a data type
	public component Generator<InputRecord> extends Generator<T> {
		private InputRecord generateMessage() {
			InputRecord ret;
			
			ret.firstField=1;
			ret.secondField=2;
			ret.thirdField=true;
			
			return ret;
		}
	}


	public abstract component TrashBin<T> {
		public in port T input;
		
		main {
			T rec;
			while (rec << input) {
				// do nothing				
			}
		}
	}


	public record InputRecord extends FilterMetaRecord {
		int firstField delimiter("|");
		int secondField length(20);
		boolean thirdField delimiter("\n");
	}
	
	// component as transformation field
	private Generator<InputRecord> reader = new Generator<InputRecord>();
		
	// filter inline implementation
	private Filter<InputRecord> filter = new Filter<InputRecord>(100);
	
	// trash bin implementation
	private TrashBin<InputRecord> trashBin = new TrashBin<InputRecord>();
	
	
	graph {
		connect reader.output -> filter.input;
		connect filter.validOutput -> trashBin.input;
	}
}