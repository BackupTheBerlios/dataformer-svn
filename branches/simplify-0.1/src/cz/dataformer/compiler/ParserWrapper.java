package cz.dataformer.compiler;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.util.Collections;

import cz.dataformer.GraphParser;
import cz.dataformer.ParseException;
import cz.dataformer.ast.TransformationFieldDeclaration;
import cz.dataformer.ast.ImportDeclaration;
import cz.dataformer.ast.Transformation;
import cz.dataformer.ast.record.RecordDeclaration;
import cz.dataformer.ast.statement.ConnectStatement;
import cz.dataformer.ast.ComponentDeclaration;

/**
 * Wrapper methods over parser generated by JJT.
 * Handles opening and reading of new graph files on demand.
 * 
 * @author mtomcany
 *
 */
public class ParserWrapper {

	private static final ParserWrapper INSTANCE = new ParserWrapper();
	private final FileManager fileManager = FileManager.getInstance();
	private final ProblemReporter reporter = ProblemReporter.getInstance();
	
	/*
	 * singleton for types that can not be parsed
	 * due to unavailable file or syntactic errors
	 */
	private static final Transformation ERROR_TYPE = new Transformation(
			-1,
			-1,
			null, // modifiers
			"ErrorneousTransformation",
			Collections.<ComponentDeclaration>emptyList(),
			Collections.<RecordDeclaration>emptyList(),
			Collections.<TransformationFieldDeclaration>emptyList(),
			Collections.<ConnectStatement>emptyList(),
			null,// package name
			Collections.<ImportDeclaration>emptyList()
			);
	 

	
	private ParserWrapper() {
			 // not available
	}
	
	public static ParserWrapper getInstance() {
		return INSTANCE;
	}
	
	/**
	 * Main method of {@link ParserWrapper}.
	 * Requests resolution fo the physical file from the fully qualified name.
	 * When successfully resolved, parsing is initiated.
	 * 
	 * In case the file is not found or contain syntax error preventing the parsing,
	 * errorneous XformEntry is returned. See {@link XformEntry#isInError()}
	 * 
	 * @param fqn	fully qualified transformation name
	 * @return	transformation entry containing info about parsed file
	 */
	public XformEntry parse(String fqn) {
		
		XformEntry entry = null;
		File xformFile = null;
		try {
			xformFile = fileManager.resolve(fqn);
			GraphParser parser = new GraphParser(new FileInputStream(xformFile));
			Transformation ast = parser.Transformation();
			entry = new XformEntry(fqn,xformFile,ast);
		} catch (IllegalArgumentException e) {
			entry = new XformEntry(fqn,null,ERROR_TYPE);
			reporter.illegalFileName(fqn);
		} catch (FileNotFoundException e) {
			entry = new XformEntry(fqn,null,ERROR_TYPE);
			reporter.fileNotFound(entry);
		} catch (ParseException e) {
			entry = new XformEntry(fqn,xformFile,ERROR_TYPE);
			reporter.canNotParse(entry,e);
		}
		
		return entry;
	}
	
	
}
