package cz.dataformer.compiler;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;

import cz.dataformer.GraphParser;
import cz.dataformer.ParseException;
import cz.dataformer.compiler.model.TopLevelModel.TopLevel;

/**
 * Wrapper methods over parser generated by JJT.
 * Handles opening and reading of new graph files on demand.
 * 
 * @author mtomcany
 *
 */
public class ParserWrapper {

	private static final ParserWrapper INSTANCE = new ParserWrapper();
	private final ProblemReporter pr = ProblemReporter.getInstance();
	
	private ParserWrapper() {
			 // not available
	}
	
	public static ParserWrapper getInstance() {
		return INSTANCE;
	}
	
	/**
	 * Main method of {@link ParserWrapper}.
	 * 
	 * In case the file is not found or contain syntax error preventing the parsing,
	 * erroneous XformEntry is returned. See {@link XformEntry#isInError()}
	 * 
	 * @param fqn	fully qualified transformation name
	 * @return	transformation entry containing info about parsed file
	 */
	public XformEntry parse(File xformFile, TopLevel type) {
		
		XformEntry entry = null;
		try {
			GraphParser parser = new GraphParser(new FileInputStream(xformFile));
			switch (type) {
			case RECORD:
					entry = new XformEntry(xformFile,parser.TopLevelRecordDeclaration(),TopLevel.RECORD);
					break;
			case COMPONENT: 
					entry = new XformEntry(xformFile,parser.TopLevelComponentDeclaration(),TopLevel.COMPONENT);
					break;
			case TRANSFORMATION:
					entry = new XformEntry(xformFile,parser.Transformation(),TopLevel.TRANSFORMATION);
					break;
			}
		} catch (FileNotFoundException e) {
			entry = new XformEntry(null,null,null);
			entry.setInError();
			String file = pr.getFile();
			pr.setFile(xformFile.getAbsolutePath());
			pr.fileNotFound();
			pr.setFile(file);
		} catch (ParseException e) {
			entry = new XformEntry(xformFile,null,null);
			entry.setInError();
			String file = pr.getFile();
			pr.canNotParse(e);
			pr.setFile(file);
		}
		
		return entry;
	}

}
